"use strict";(self.webpackChunkmonodb_docs=self.webpackChunkmonodb_docs||[]).push([[753],{5324:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/network-protocol","title":"Network Protocol","description":"MonoDB uses a custom binary protocl for client-server communication over TCP.","source":"@site/docs/api/network-protocol.md","sourceDirName":"api","slug":"/api/network-protocol","permalink":"/Mono-DB/docs/api/network-protocol","draft":false,"unlisted":false,"editUrl":"https://github.com/Jacob-Walton/Mono-DB/tree/main/monodb-docs/docs/api/network-protocol.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Network Protocol","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"NSQL Language Reference","permalink":"/Mono-DB/docs/nsql-reference"}}');var l=s(4848),r=s(8453);const o={title:"Network Protocol",sidebar_position:1},i="MonoDB Network Protocol",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Connection Flow",id:"connection-flow",level:2},{value:"Message Format",id:"message-format",level:2},{value:"Wire Format",id:"wire-format",level:3},{value:"Client Messages",id:"client-messages",level:3},{value:"Ping",id:"ping",level:4},{value:"Execute",id:"execute",level:4},{value:"List Tables",id:"list-tables",level:4},{value:"Server Messages",id:"server-messages",level:3},{value:"Pong",id:"pong",level:4},{value:"Execute Result",id:"execute-result",level:4},{value:"Table List",id:"table-list",level:4},{value:"Error",id:"error",level:4},{value:"Data Types",id:"data-types",level:2},{value:"Error Codes",id:"error-codes",level:2},{value:"Connection Management",id:"connection-management",level:2},{value:"Timeouts",id:"timeouts",level:3},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Example Client",id:"example-client",level:2},{value:"Python Example",id:"python-example",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Planned Security Features",id:"planned-security-features",level:3},{value:"Protocol Evolution",id:"protocol-evolution",level:2},{value:"Performance Tips",id:"performance-tips",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"monodb-network-protocol",children:"MonoDB Network Protocol"})}),"\n",(0,l.jsx)(n.p,{children:"MonoDB uses a custom binary protocl for client-server communication over TCP."}),"\n",(0,l.jsx)(n.admonition,{title:"Protocol Version",type:"info",children:(0,l.jsx)(n.p,{children:"Current protocol version: 1.0 (unstable)"})}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"The protocol uses a simple request-response model:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Client sends a request message"}),"\n",(0,l.jsx)(n.li,{children:"Server processes the request"}),"\n",(0,l.jsx)(n.li,{children:"Server sends a response message"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"All messages are:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Length prefixed (4 bytes, big-endian)"}),"\n",(0,l.jsx)(n.li,{children:"JSON-encoded"}),"\n",(0,l.jsx)(n.li,{children:"Maximum size: 1MB"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"connection-flow",children:"Connection Flow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Client                          Server\n  |                               |\n  |-------- TCP Connect ---------\x3e|\n  |                               |\n  |-------- Ping Message --------\x3e|\n  |<-------- Pong Reply ----------|\n  |                               |\n  |------ Execute Query ---------\x3e|\n  |<------ Query Result ----------|\n  |                               |\n  |-------- Disconnect ----------\x3e|\n  |                               |\n"})}),"\n",(0,l.jsx)(n.h2,{id:"message-format",children:"Message Format"}),"\n",(0,l.jsx)(n.h3,{id:"wire-format",children:"Wire Format"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"+----------------+------------------+\n|  Length (4B)   |   JSON Payload   |\n+----------------+------------------+\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Length"}),": 32-bit unsigned integer, big-endian"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Payload"}),": UTF-8 encoded JSON"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"client-messages",children:"Client Messages"}),"\n",(0,l.jsx)(n.h4,{id:"ping",children:"Ping"}),"\n",(0,l.jsx)(n.p,{children:"Tests server connectivity."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "Ping"\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"execute",children:"Execute"}),"\n",(0,l.jsx)(n.p,{children:"Executes a SQL query."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "Execute",\n  "sql": "SELECT * FROM users",\n  "database": null // optional, reserved for future use\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"list-tables",children:"List Tables"}),"\n",(0,l.jsx)(n.p,{children:"Lists all tables in the database."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "ListTables",\n  "database": null // optional, reserved for future use\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"server-messages",children:"Server Messages"}),"\n",(0,l.jsx)(n.h4,{id:"pong",children:"Pong"}),"\n",(0,l.jsx)(n.p,{children:"Response to Ping."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "Pong"\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"execute-result",children:"Execute Result"}),"\n",(0,l.jsx)(n.p,{children:"Response to query execution."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "ExecuteResult",\n  "results": [\n    {\n      "result_type": "Select",\n      "columns": [\n        {\n          "name": "id",\n          "data_type": "INTEGER",\n          "nullable": false\n        },\n        {\n          "name": "username",\n          "data_type": "VARCHAR(50)",\n          "nullable": true\n        }\n      ],\n      "rows": [\n        [{ "Integer": 1 }, { "String": "alice" }],\n        [{ "Integer": 2 }, { "String": "bob" }]\n      ],\n      "rows_affected": null\n    }\n  ],\n  "rows_affected": null,\n  "execution_time_ms": 15\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"table-list",children:"Table List"}),"\n",(0,l.jsx)(n.p,{children:"Response to list tables request."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "TableList",\n  "tables": ["users", "products", "orders"]\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"error",children:"Error"}),"\n",(0,l.jsx)(n.p,{children:"Error response for any failed operation."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "type": "Error",\n  "code": "TableNotFound",\n  "message": "Table \'users\' not found",\n  "details": "The table does not exist in the current database"\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,l.jsx)(n.p,{children:"Values in result rows are encoded as tagged unions:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{ "Integer": 42 }\n{ "Float": 3.14 }\n{ "String": "hello" }\n{ "Boolean": true }\n{ "Null": null }\n{ "Date": "2024-01-15" }\n{ "DateTime": "2024-01-15 10:30:45" }\n'})}),"\n",(0,l.jsx)(n.h2,{id:"error-codes",children:"Error Codes"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Code"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"ParseError"})}),(0,l.jsx)(n.td,{children:"SQL syntax error"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"ExecutionError"})}),(0,l.jsx)(n.td,{children:"Runtime query error"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"TableNotFound"})}),(0,l.jsx)(n.td,{children:"Referenced table doesn't exist"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"ColumnNotFound"})}),(0,l.jsx)(n.td,{children:"Referenced column doesn't exist"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"TypeMismatch"})}),(0,l.jsx)(n.td,{children:"Type conflict in operation"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"ConstraintViolation"})}),(0,l.jsx)(n.td,{children:"Constraint check failed"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"InternalError"})}),(0,l.jsx)(n.td,{children:"Server internal error"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"NotImplemented"})}),(0,l.jsx)(n.td,{children:"Feature not yet implemented"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"connection-management",children:"Connection Management"}),"\n",(0,l.jsx)(n.h3,{id:"timeouts",children:"Timeouts"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Default connection timeout: 5 minutes"}),"\n",(0,l.jsx)(n.li,{children:"Heartbeat interval: 30 seconds"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,l.jsx)(n.p,{children:"Clients should implement connection pooling for better performance."}),"\n",(0,l.jsx)(n.h2,{id:"example-client",children:"Example Client"}),"\n",(0,l.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import socket\nimport json\nimport struct\n\nclass MonoDBClient:\n    def __init__(self, host=\'localhost\', port=3282):\n        self.host = host\n        self.port = port\n        self.sock = None\n    \n    def connect(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((self.host, self.port))\n        \n        # Send ping to verify connection\n        response = self._send_message({"type": "Ping"})\n        if response.get("type") != "Pong":\n            raise Exception("Invalid handshake")\n    \n    def execute(self, sql):\n        message = {\n            "type": "Execute",\n            "sql": sql,\n            "database": None\n        }\n        return self._send_message(message)\n    \n    def _send_message(self, message):\n        # Serialize to JSON\n        payload = json.dumps(message).encode(\'utf-8\')\n        \n        # Send length prefix\n        length = struct.pack(\'>I\', len(payload))\n        self.sock.send(length)\n        \n        # Send payload\n        self.sock.send(payload)\n        \n        # Read response length\n        length_bytes = self._recv_exactly(4)\n        length = struct.unpack(\'>I\', length_bytes)[0]\n        \n        # Read response payload\n        payload = self._recv_exactly(length)\n        return json.loads(payload.decode(\'utf-8\'))\n    \n    def _recv_exactly(self, n):\n        data = b\'\'\n        while len(data) < n:\n            chunk = self.sock.recv(n - len(data))\n            if not chunk:\n                raise Exception("Connection closed")\n            data += chunk\n        return data\n    \n    def close(self):\n        if self.sock:\n            self.sock.close()\n\n# Usage\nclient = MonoDBClient()\nclient.connect()\nresult = client.execute("SELECT * FROM users")\nprint(result)\nclient.close()\n'})}),"\n",(0,l.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,l.jsx)(n.admonition,{title:"No Authentication",type:"danger",children:(0,l.jsx)(n.p,{children:"The current protocol has no authentication or encryption. Do not use in production environments!"})}),"\n",(0,l.jsx)(n.h3,{id:"planned-security-features",children:"Planned Security Features"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"TLS/SSL support"}),"\n",(0,l.jsx)(n.li,{children:"Authentication mechanisms"}),"\n",(0,l.jsx)(n.li,{children:"Role-based access control"}),"\n",(0,l.jsx)(n.li,{children:"Query paramter binding (to prevent SQL injection)"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"protocol-evolution",children:"Protocol Evolution"}),"\n",(0,l.jsx)(n.p,{children:"The protocol is versioned to allow future changes:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Version negotiation during handshake (planned)"}),"\n",(0,l.jsx)(n.li,{children:"Backward compatibility for minor versions"}),"\n",(0,l.jsx)(n.li,{children:"Feature capability discovery"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reuse connections"})," - Connection establishment has overhead"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use prepared statements"})," (when implemented) for repeated queries"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Batch operations"})," when possible"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Monitor response times"})," via ",(0,l.jsx)(n.code,{children:"execution_time_ms"})," field"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(6540);const l={},r=t.createContext(l);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);